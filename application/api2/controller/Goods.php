<?php
/**
 * Created by PhpStorm.
 * User: tianfeiwen
 * Date: 2017/9/25
 * Time: 8:59
 */

namespace app\api2\controller;

use think\Db;
use think\Config;
use app\common\model\Cart;
use app\common\model\Goods as GoodsModel;
use app\common\model\Member;

class Goods extends Base
{
    public function _initialize()
    {
        header("Content-type:text/html;charset=utf-8");
        parent::_initialize(); // TODO: Change the autogenerated stub
    }
    /**
     * 商品分类列表
     */
    public function category()
    {
        $list = DB::name('goods_category')->field('id,name,order')->where('parent_id',0)->order('order asc')->select();
        return json(['status' => 1, 'msg' => '获取数据成功', 'data' => $list]);
    }
    /**
     * 获取商品列表
     * @param $group             商品分区：1代理区，2代营区，3自营区
     * @param $keywords [str]    关键字搜素
     * @param $cid [int]         分类ID
     * @param $order_by [string] 按什么排序 'colligate'=>综合,'sales_num'=>销量,'shop_price'=>价格
     * @param $order [string]    排序方式   'asc'=>正序,'desc'=>倒叙
     * @param $screen[string]    筛选   price-28_30@brand-12@spec-_15
     * @param $page [int]        当前页
     * @param $num [int]         数量
     * @return \think\response\Json
     */
    public function lists($group,$keywords='',$cid=0, $order_by = 'order', $order = 'asc', $page = 1, $count = 8)
    {
        if(!in_array($group,[1,2,3])){
            return json(['status' => 0, 'msg' => '分区参数错误']);
        }
        $map['is_on_sale']  = 1;
        $map['store_count'] = ['>', 0];
        if($cid > 0) $map['cat_id'] = $cid;
        if(!empty($keywords)) $map['goods_name'] = ['like',"%$keywords%"];
        switch($group){
            case 1:
                $price_field = 'dl_price';
                if($order_by == 'shop_price')   $order_by = 'dl_price';
                break;
            case 2:
                $price_field = 'dy_price';
                if($order_by == 'shop_price')   $order_by = 'dy_price';
                break;
            case 3:
                $price_field = 'zy_price';
                if($order_by == 'shop_price')   $order_by = 'zy_price';
                break;
        }
        if($order_by == 'colligate')    $order_by='order';
        $list = Db::name('goods')->field('id,goods_name,original_img,'.$price_field.' as price')->where($map)->order($order_by." ".$order)->page($page, $count)->select();
        if ($list) {
            return json(['status' => 1, 'msg' => '获取数据成功', 'data' => $list]);
        }
        return json(['status' => 0, 'msg' => '没有数据了', 'data' => '']);
    }
    /**
     * 分享页面商品详情
     * @param $id
     * @return \think\response\Json
     * @throws \think\Exception
     */
    public function share_goods_detail($id,$group,$rcode)
    {
        if(!in_array($group,[1,2,3])){
            return json(['status' => 0, 'msg' => '分区参数错误']);
        }
        switch($group){
            case 1:
                $price_field = 'dl_price';
                break;
            case 2:
                $price_field = 'dy_price';
                break;
            case 3:
                $price_field = 'zy_price';
                break;
        }
        $info = Db::name('goods')->field('id,goods_name,original_img,'.$price_field.' as price,store_count,goods_content,sales_num,click_count')->where(['id'=>$id,'is_on_sale'=>1])->find();
        if($info){
            $info['group'] = $group;
            //获取商品评价总数
            $info['comment_num'] = Db::name('goods_comment_content')->where('goods_id',$id)->count();
            //商品图库
            $info['img_tuku'] = Db::name('goods_images')->where('goods_id', $id)->order('id asc')->column('image_url');
            //是否收藏
            $info['is_collection'] =  0;
            //增加点击量
            Db::name('goods')->where('id', $id)->setInc('click_count');
            //增加分享积分
            $user = Db::name('member')->where('rcode',$rcode)->find();
            if($user && $user['share_time'] < strtotime(date('Y-m-d',time()))){
                $data = [
                    'uid'   => $user['id'],
                    'num'   => 1,
                    'create_time' => time(),
                    'act'   => 42,
                    'remark'=> '分享送积分'
                ];
                Db::name('integral_log')->insert($data);
                Db::name('member')->where('id',$user['id'])->update(['share_time'=>time(),'integral'=>$user['integral']+1]);
            }
        }
        return $this->returnJson($info);
    }
    /**
     * 商品详情
     * @param $id
     * @return \think\response\Json
     * @throws \think\Exception
     */
    public function goods_detail($id,$group)
    {
        if(!in_array($group,[1,2,3])){
            return json(['status' => 0, 'msg' => '分区参数错误']);
        }
        switch($group){
            case 1:
                $price_field = 'dl_price';
                break;
            case 2:
                $price_field = 'dy_price';
                break;
            case 3:
                $price_field = 'zy_price';
                break;
        }
        $info = Db::name('goods')->field('id,goods_name,original_img,'.$price_field.' as price,store_count,goods_content,sales_num,click_count')->where(['id'=>$id,'is_on_sale'=>1])->find();
        $info['group'] = $group;
        //获取商品评价总数
        $info['comment_num'] = Db::name('goods_comment_content')->where('goods_id',$id)->count();
        //商品图库
        $info['img_tuku'] = Db::name('goods_images')->where('goods_id', $id)->order('id asc')->column('image_url');
        //是否收藏
        $is_collection = Db::name('goods_collection')->where(['user_id' => $this->uid, 'goods_id' => $id])->count();
        $info['is_collection'] = $is_collection ? 1 : 0;
        //增加点击量
        Db::name('goods')->where('id', $id)->setInc('click_count');
        return $this->returnJson($info);
    }

    /**
     * 收藏&取消收藏
     * @param $id
     * @return \think\response\Json
     */
    public function collection($id,$group)
    {
        $user_id = $this->uid;
        if (!Db::name('goods')->where('id', $id)->find()) {
            return json(['status' => 0, 'msg' => '没有该件商品']);
        }
        if (Db::name('goods_collection')->where(['user_id' => $user_id, 'goods_id' => $id,'goods_group'=>$group])->find()) {
            //取消收藏
            Db::name('goods_collection')->where(['user_id' => $user_id, 'goods_id' => $id,'goods_group'=>$group])->delete();
            return json(['status' => 1, 'msg' => '取消收藏成功']);
        } else {
            //收藏
            Db::name('goods_collection')->insert(['user_id' => $user_id, 'goods_id' => $id,'goods_group'=>$group, 'add_time' => time()]);
            return json(['status' => 1, 'msg' => '收藏成功']);
        }
    }

    /**
     * 收藏列表
     * @return \think\response\Json
     */
    public function collection_list($page = 1, $count = 8)
    {
        $list = Db::name('goods_collection')->alias('a')->field('g.goods_name,g.original_img, a.id, a.goods_id,a.goods_group')->join('goods g', 'a.goods_id = g.id', 'left')->where('a.user_id', $this->uid)->order('a.id desc')->page($page, $count)->select();
        return $this->returnJson($list);
    }

    /**
     * 多条删除收藏信息
     * @param $ids
     * @return \think\response\Json
     * @throws \think\Exception
     */
    public function uncollection($ids)
    {
        if (!$user_id = get_uid()) {
            return json(['status' => 0, 'msg' => '未登录，请先登录']);
        }
        $ids = explode('-', $ids);
        if ($ids) {
            Db::name('goods_collection')->where(['user_id' => $user_id, 'id' => ['in', $ids]])->delete();
            return json(['status' => 1, 'msg' => '删除成功']);
        } else {
            return json(['status' => 0, 'msg' => '参数错误']);
        }
    }
    /**
     * 添加进购物车
     * @param $id [int] 商品ID
     * @param $goods_num [int] 商品数量
     * @param $goods [int] 商品所属分区 1代理区，2代营区，3自营区
     * @param string $goods_spec_key [int] 商品规格 12_2_3
     * @return \think\response\Json
     */
    public function add_cart($id,$group,$num=1,$goods_spec_key = '')
    {
        if(!in_array($group,[1,2,3])){
            return json(['status' => 0, 'msg' => '商品分区参数错误']);
        }
        $cartModel = Cart::getInstance(get_uid());
        $res = $cartModel->add($id, $num, $group,$goods_spec_key);
        return json($res);
    }

    /**
     * 获取购物车数量
     * @return \think\response\Json
     */
    public function get_cart_goods_num()
    {
        $cartModel = Cart::getInstance(get_uid());
        $res = $cartModel->getUserCartGoodsNum();
        return json(['status' => 1, 'msg' => '获取数据成功', 'data' => $res]);
    }

    /**
     * 购物车数量操作
     * @param $id          购物车信息ID
     * @param string $mode 增加+ 减少-
     * @param int $num      数量
     * @return \think\response\Json
     */
    public function change_cart_num($id, $mode = '+', $num = 1)
    {
        $cartModel = Cart::getInstance(get_uid());
        if ($mode == '-') {
            $res = $cartModel->reduce($id, $num);
        } else {
            $res = $cartModel->increase($id, $num);
        }
        return json($res);
    }

    /**
     * 编辑购物车商品规格和数量
     * @param $id       购物车信息ID
     * @param $spec_key 规格
     * @param $num      数量
     * @return \think\response\Json
     */
    public function change_cart_spec($id, $spec_key, $num)
    {
        $cartModel = Cart::getInstance(get_uid());
        $res = $cartModel = $cartModel->change_cart_spec($id, $spec_key, $num);
        return json($res);
    }

    /**
     * 移除出购物车
     * @param $id 购物车信息ID
     * @return \think\response\Json
     */
    public function remove_cart($id)
    {
        $cartModel = Cart::getInstance(get_uid());
        $res = $cartModel->remove($id);
        return json($res);
    }

    /**
     * 切换购物车选中与未选中
     * @param $id
     * @return \think\response\Json
     */
    public function change_cart_selected($id)
    {
        $cartModel = Cart::getInstance(get_uid());
        $res = $cartModel->changeSelected($id);
        return json($res);
    }

    /**
     * 购物车全选
     * @param $selected 是否全选   1 全选 0全不选
     * @return \think\response\Json
     */
    public function change_cart_selected_all($selected = 0)
    {
        $cartModel = Cart::getInstance(get_uid());
        $res = $cartModel->changeSelectedAll($selected);
        return json($res);
    }

    /**
     * 购物车修改规格时候调用
     * @param $id
     * @return \think\response\Json
     * @throws \think\Exception
     */
    public function goods_spec_for_cart($id)
    {
        $info = Db::name('goods')->where('id', $id)->find();
        //商品规格
        $spec_goods = Db::name('spec_goods')->where('goods_id', $id)->column('key,price,store_count,key_name','key');
        if ($spec_goods) {
            $key = array_keys($spec_goods);
            //['12_20_15','12_21_15']
            $keyArr = [];
            foreach ($key as $k => $v) {
                $v = explode('_', $v);
                foreach ($v as $k1 => $v1) {
                    if (isset($keyArr[$k1]) && in_array($v1, $keyArr[$k1])) {
                        continue;
                    }
                    $keyArr[$k1][] = $v1;
                }
            }
            //[[12],[20,21],[15]]
            $specArr = [];
            foreach ($keyArr as $k => $v) {
                $spec_id = Db::name('goods_spec_item')->where('id', $v[0])->value('spec_id');
                $key = Db::name('goods_spec')->where('id', $spec_id)->value('name');
                $item = Db::name('goods_spec_item')->field('id,item')->where(['id' => ['in', $v]])->order('id asc')->select();
                $specArr[$key] = $item;
            }
            $info['sepc_arr']  = $specArr;
            //属性对应的价格库存 及图片
            foreach ($spec_goods as $k => $v) {
                $key = explode('_', $v['key']);
                $img = Db::name('spec_image')->where(['goods_id' => $id, 'spec_item_id' => ['in', $key]])->value('src');
                $spec_goods[$k]['img']      = $img ? $img : $info['original_img'];
                //给前端返回已选择的规格项拼接的字符串
                $spec_goods[$k]['key_value'] = '';
                foreach(explode(' ', $v['key_name']) as $k2 => $v2) {
                    $arr = explode(':', $v2);
                    $spec_goods[$k]['key_value'] .= ' "' . $arr[1] . '""';
                }
                trim($spec_goods[$k]['key_value']);
            }
            $info['spec_data'] = $spec_goods;
        } else {
            $info['sepc_arr']  = [];
            $info['spec_data'] = [];
        }
        return $this->returnJson($info);
    }
    /**
     * 购物车列表
     * @param int $selected 0为全部  1为选中
     * @return \think\response\Json
     */
    public function get_cart_list($selected = 0)
    {
        $cartModel = Cart::getInstance(get_uid());
        $res = $cartModel->cartList($selected);
        if ($res['cartList']) {
            //关注与未关注
            $user_id = get_uid();
            $collectionID = [];
            if ($user_id) {
                $collectionID = Db::name('goods_collection')->where(['user_id' => $user_id])->column('goods_id');
            }
            foreach ($res['cartList'] as $k => $v) {
                $res['cartList'][$k]['is_collection'] = -1;
                if ($user_id) {
                    $res['cartList'][$k]['is_collection'] = in_array($v['goods_id'], $collectionID) ? 1 : 0;
                }
            }
            return json(['status' => 1, 'msg' => '获取数据成功', 'data' => $res]);
        }
        return json(['status' => 1, 'msg' => '购物车没有商品', 'data' => '']);
    }

    /**
     * 通用返回数据方法
     * @param $data
     * @return \think\response\Json
     */
    protected function returnJson($data)
    {
        return $data ? json(['status' => 1, 'msg' => '获取数据成功', 'data' => $data]) : json(['status' => 0, 'info' => '没有数据了', 'data' => '']);
    }

    /**
     * 通用对list 兑换羊币 换算成 金额
     * @param $list
     * @return mixed
     */
    protected function point_rate($list)
    {
        //羊币兑换比例
        $point_rate = Config::get('point_rate');
        foreach ($list as $k => $v) {
            if ($v['exchange_integral']) {
                $list[$k]['exchange_integral_money'] = number_format($v['exchange_integral'] / $point_rate, 2);
            }
        }
        return $list;
    }

    /**
     * @param $goods_id      商品ID
     * @param $order_id      订单ID
     * @param string $img    多个图片用@隔开
     * @param int $is_anony  是否匿名  默认为否
     * @param int $rank      星星  默认为1
     * @return \think\response\Json
     */
    public function comment($goods_id, $order_id, $content,$rank = 1,$img = '', $type = 0, $is_anony = 0)
    {
        //echo $goods_id;exit;
        $user_id = $this->uid;

        $arr['orderId'] = $order_id;
        $arr['infoId'] = $goods_id;
        $arr['uid'] = $user_id;
        $arr['is_anony'] = $is_anony;
        $data['pic_url'] = !empty($img)?json_encode($img):'';
        $data['rank'] = $rank;
        
        $data['content'] = trim($content);
        $data['type'] = $type;
        if (!$row = Db::name('order')->where(['order_id' => $arr['orderId'], 'user_id' => $arr['uid']])->find()) {
            return json(['status' => 0, 'msg' => '没有该订单']);
        }
        if ($row['order_status'] != 2 && $row['order_status'] != 4) {
            return json(['status' => 0, 'msg' => '请收货后再评论']);
        }
        if (!Db::name('order_goods')->where(['order_id' => $arr['orderId'], 'goods_id' => $arr['infoId']])->find()) {
            return json(['status' => 0, 'msg' => '你没有权限评论该商品']);
        }
        $row = Db::name('goods_comment')->alias('com')->field('com.id,com.uid,com.infoId,com.orderId,con.type')->join('goods_comment_content con', 'com.id = con.commentId')->where(['com.infoId' => $arr['infoId'], 'com.orderId' => $arr['orderId'], 'con.type' => 0])->find();
        if ($data['type'] == 0) {
            if ($row) {
                return json(['status' => 0, 'msg' => '你已评论过该商品，无法评论']);
            }
        } elseif ($data['type'] == 1) {
            if (!$row) {
                return json(['status' => 0, 'msg' => '你不能追加评论']);
            }
        } else {
            return json(['status' => 0, 'msg' => 'type传参错误']);
        }
        $arr['c_time'] = time();
        $data['c_time'] = time();
        if (!$r = Db::name('goods_comment')->where(['infoId' => $arr['infoId'], 'orderId' => $arr['orderId']])->find()) {
            if (!$id = Db::name('goods_comment')->insertGetId($arr)) {
                return json(['status' => 0, 'msg' => '评论失败']);
            }
            //此商品评论
            DB::name('order_goods')->where(['order_id' => $order_id, 'goods_id' => $goods_id])->update(['is_comment' => 1]);//修改商品订单信息已评论
            Db::name('goods')->where('id', $goods_id)->setInc('comment_count');//增加商品评论数量
            Db::name('order')->where('order_id', $order_id)->update(['order_status' => 4]);//修改订单状态
        } else {
            $id = $r['id'];
        }
        $data['commentId'] = $id;
        $data['goods_id'] = $goods_id;
        if (!Db::name('goods_comment_content')->insert($data)) {
            return json(['status' => 0, 'msg' => '评论失败']);
        }
        $ctime = date('Y-m-d H:i:s', $data['c_time']);
        return json(['status' => 1, 'msg' => '评论成功', 'data'=>['ctime' => $ctime]]);
    }

    public function comment_list($goods_id, $page = 1, $count = 10) {
        $infoId = $goods_id;
        //$page   = $page;
        //$count  = $num;
        $list = Db::name('goods_comment')->where('infoId', $infoId)->order('id desc')->page($page, $count)->select();
        foreach ($list as $key => $val) {
            $data = Db::name('goods_comment_content')->where('commentId', $val['id'])->order('type asc,id desc')->select();
            foreach ($data as $k => $v) {
                $data[$k]['pic_url']   = json_decode($v['pic_url'], true);
                $data[$k]['reply_pic'] = json_decode($v['reply_pic'], true);
                if (!$val['is_anony']) {
                    $member   = new member();
                    $userInfo = $member->field('head_img, nickname')->where('id', $val['uid'])->find();
                    $data[$k]['user_avatar']   = $userInfo['head_img'];
                    $data[$k]['user_nickname'] = $userInfo['nickname'];
                } else {
                    $data[$k]['user_avatar']   = '';
                    $data[$k]['user_nickname'] = '匿名用户';
                }
                if ($v['reply_uid']) {
                    $user_reply = Db::name('admin')->field('username')->where('id', $v['reply_uid'])->find();
                    $data[$k]['user_reply_avatar']   = '';
                    $data[$k]['user_reply_nickname'] = $user_reply['username'];
                }
            }
            $list[$key]['comment_content'] = $data;
        }
        $total_num = Db::name('goods_comment_content')->where('goods_id',$goods_id)->count();
        if ($list) {
            return json(['status' => 1, 'msg' => '获取评论数据成功', 'data' => $list,'total_num'=>$total_num]);
        } else {
            return json(['status' => 0, 'msg' => '没有数据']);
        }
    }


    /**
     * 我的足迹
     */
    public function footprint($page = 1, $count = 10)
    {
        if (!$user_id = get_uid()) {
            return json(['status' => 0, 'msg' => '未登录，请先登录']);
        }
        $list = Db::name('goods_footprint')->alias('a')->field('g.*, a.id, a.goods_id, a.add_time,a.goods_group')->join('goods g', 'a.goods_id = g.id', 'left')->where('a.user_id', $user_id)->order('a.add_time desc')->page($page, $count)->select();
        $list = $this->point_rate($list);
        $_list = [];
        $group_name = [
            1 => '代理区商品',
            2 => '代营区商品',
            3 => '自营区商品'
        ];
        //print_r($list);exit;
        foreach ($list as $k => $v) {
            switch($v['goods_group']){
                case 1:
                    $v['goods_price'] = $v['dl_price'];
                    break;
                case 2:
                    $v['goods_price'] = $v['dy_price'];
                    break;
                case 3:
                    $v['goods_price'] = $v['zy_price'];
                    break;
            }
            $v['group_name'] = $group_name[$v['goods_group']];
            $_list[date('Y-m-d', $v['add_time'])]['time']   = date('Y-m-d', $v['add_time']);
            $_list[date('Y-m-d', $v['add_time'])]['list'][] = $v;
        }
        return $this->returnJson($_list);
    }

    /**
     * 记录足迹
     */
    public function add_footprint($id,$group)
    {
        if (!$user_id = get_uid()) {
            return json(['status' => 0, 'msg' => '未登录，请先登录']);
        }
        if (!Db::name('goods')->where('id', $id)->find()) {
            return json(['status' => 0, 'msg' => '没有该件商品']);
        }
        if (Db::name('goods_footprint')->where(['user_id' => $user_id, 'goods_id' => $id,'goods_group'=>$group])->find()) {
            Db::name('goods_footprint')->where(['user_id' => $user_id, 'goods_id' => $id,'goods_group'=>$group])->update(['add_time' => time()]);

        } else {
            Db::name('goods_footprint')->insert(['user_id' => $user_id, 'goods_id' => $id, 'add_time' => time(),'goods_group'=>$group]);
        }
        return json(['status' => 1, 'msg' => '记录成功']);
    }

    /**
     * 清空足迹
     */
    public function clear_footprint()
    {
        if (!$user_id = get_uid()) {
            return json(['status' => 0, 'msg' => '未登录，请先登录']);
        }
        Db::name('goods_footprint')->where('user_id', $user_id)->delete();
        return json(['status' => 1, 'msg' => '清空成功']);
    }

    /**
     * 秒杀商品
     */
    public function flash_sale($page = 1, $num = 8, $active = 0)
    {
        $list = Db::name('flash_sale')->alias('a')->field('a.*, g.original_img')->join('goods g', 'a.goods_id = g.id', 'left')->order('a.id desc')->page($page, $num)->select();
        if ($list) {
            foreach ($list as $k => $v) {
                //判断是否开始
                if($v['start_time'] > time()){
                    $list[$k]['status'] = 0;//未开始
                }else if($v['start_time'] < time() && $v['end_time'] > time()){
                    $list[$k]['status'] = 1;//正在进行
                }else{
                    $list[$k]['status'] = 2;//已结束
                }
                if ($v['goods_num'] - $v['buy_num'] <= 0) {
                    $list[$k]['status'] = 2;//已结束
                }
            }
            if ($active) {
                $_list = [];
                foreach ($list as $v) {
                    if ($v['status'] == 1) {
                        $_list[] = $v;
                    }
                }
                return json(['status' => 1, 'msg' => '获取正在抢购商品数据成功', 'data' => $_list]);
            }
            return json(['status' => 1, 'msg' => '获取抢购商品数据成功', 'data' => $list]);
        } else {
            return json(['status' => 0, 'msg' => '没有数据']);
        }

    }
}