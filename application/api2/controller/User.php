<?phpnamespace app\api2\controller;use app\common\service\Payment;use app\common\model\Withdraw;use app\common\service\Users;use app\common\service\Upload;use think\Db;use org\Verify;/** * swagger: 用户中心+ */class User extends Base{    /*public function test_income(){        \app\common\service\Income::buy_income();    }*/    /**	 * post: 账号注册	 */    public function register($account,$password,$rcode){        if ($account == '' || $password == '' || $rcode == ''){            return json(['status'=>0,'msg'=>'参数错误']);        }        //$preg_str = '/^[A-Za-z0-9_-]{6,32}$/';        //if(preg_match($preg_str,$account) && preg_match($preg_str,$password)){            $Users=new Users();            if($Users->check_account($account)){                return json(['status'=>0,'msg'=>'账户名已被占用']);            }            if(($ruid=$Users->check_rcode($rcode)) == 0){                return json(['status'=>0,'msg'=>'推荐码无效']);            }            $res = $Users->reg($account, $password,$ruid);            if ($res)            {                $data['status'] = 1;                $data['msg'] = '注册成功';            } else {                $data['status'] = 0;                $data['msg'] = '注册失败';            }                    /*}else{            $data = ['status'=>0,'msg'=>'账号或密码不符合规范'];        }*/        return json($data);    }    /**     * post: 手机号注册     */    public function mobile_register($mobile,$password,$rcode){        /*if ($mobile == '' || $password == '' || $rcode == '' || $verify==''){            return json(['status'=>0,'msg'=>'参数错误']);        }*/        if ($mobile == '' || $password == '' || $rcode == ''){            return json(['status'=>0,'msg'=>'参数错误']);        }        /*$preg_str = '/^[A-Za-z0-9_-]{6,32}$/';        if(preg_match($preg_str,$password) && preg_match($preg_str,$password)){            return json(['status'=>0,'msg'=>'密码不符合规范']);        }*/        $Users = new Users();        //判断手机号是否已被占用        if($Users->check_mobile($mobile)){            return json(['status'=>0,'msg'=>'手机号已被占用']);        }        if(($ruid=$Users->check_rcode($rcode)) == 0){            return json(['status'=>0,'msg'=>'推荐码无效']);        }        //$check_verify = $this->check_verify($mobile,$verify);        $check_verify['status'] = 1;        if($check_verify['status'] == 1){            $res = $Users->reg($mobile, $password,$ruid,1);            if ($res)            {                $data['status'] = 1;                $data['msg'] = '注册成功';            } else {                $data['status'] = 0;                $data['msg'] = '注册失败';            }            return json($data);        }else{            return json($check_verify);        }    }    //账号登录	public function login($account, $password) {		if ($account != '' || $password != '') {			$Users=new Users();			$user =$Users->login($account,$password);			if ($user == false)			{				$data['status'] = 0;				$data['msg'] = '账号密码错误或用户已被禁用';				return json($data);			} else {				$Users->autoLogin($user);                if($user->mobile){                    unset($user['password']);                    $data['status'] = 1;                    $data['data'] = $user;                    $data['msg'] = '登录成功';                }else{                    $data['status'] = 2;                    $data['msg']  = '未绑定手机号';                }				//\app\common\model\Cart::getInstance()->doLoginHandle($user['id']);//购物车登录整合                writelogfront($user->id,'账号密码登录');				return json($data);			}		} else {			$data['status'] = 0;			$data['msg'] = '参数错误';			return json($data);		}	    }    public function logout(){        $Users=new Users();        return json($Users->logout());    }    //手机绑定    public function bind_mobile($mobile,$verify){        $Users = new Users();        //判断手机号是否已被占用        if($Users->check_mobile($mobile)){            return json(['status'=>0,'msg'=>'手机号已被占用']);        }        $user = Db::name('member')->where('mobile',$mobile)->find();        if($user['mobile']){            return json(['status'=>0,'msg'=>'已绑定其他手机号']);        }        $check_verify = $this->check_verify($mobile,$verify);        if($check_verify['status'] == 1){            if($Users->update_info($this->uid,['mobile'=>$mobile])){                $data = ['status'=>1,'msg'=>'绑定成功！'];            }else{                $data = ['status'=>0,'msg'=>'绑定失败！'];            }            return json($data);        }else{            return json($check_verify);        }    }    //手机验证码登录    public function mobile_login($mobile,$verify){        $check_verify = $this->check_verify($mobile,$verify);        if($check_verify['status'] == 1){            $Users = new Users();            if(($user=$Users->check_mobile($mobile)) != false){                $Users->autoLogin($user);                $data = ['status'=>1,'msg'=>'登录成功！'];                writelogfront($user->id,'手机验证码登录');            }else{                $data = ['status'=>0,'msg'=>'该号码尚未绑定！'];            }            return json($data);        }else{            return json($check_verify);        }    }    public function img_verify()    {        $verify = new Verify();        $verify->imageH = 32;        $verify->imageW = 100;        $verify->codeSet = '0123456789';        $verify->length = 4;        $verify->useNoise = false;        $verify->fontSize = 14;        return $verify->entry();    }    //发送手机登录验证码    public function send_verify_login($mobile,$img_code){        if(Db::name('member')->where(['mobile'=>$mobile,'closed'=>0,'status'=>1])->find()){            return $this->send_verify2($mobile,$img_code);        }else{            return json(['status'=>0,'msg'=>'用户不存在或已被禁用']);        }    }    //发送手机绑定验证码    public function send_verify_bind($mobile,$img_code){        $Users = new Users();        //判断手机号是否已被占用        if($Users->check_mobile($mobile)){            return json(['status'=>0,'msg'=>'手机号已被占用']);        }else{            return $this->send_verify2($mobile,$img_code);        }    }    //发送修改银行卡信息验证码    public function send_verify_bank($img_code){        $user_mobile = Db::name('member')->where('id',$this->uid)->value('mobile');        if($user_mobile){            return $this->send_verify2($user_mobile,$img_code);        }else{            return json(['status'=>0,'msg'=>'用户未绑定手机号']);        }    }            //$img_verify 是否需要图片验证，默认1需要，0不需要    public function send_verify2($mobile,$img_code=0,$img_verify=1){        if($img_verify == 1){            $verify = new Verify();            if($verify->check($img_code) !== true){                return json(['status'=>0,'msg'=>'图片验证码错误']);            }        }        if(!isMobile($mobile)){            return json(['status'=>0,'msg'=>'手机号码不合法']);        }        $verify_info = session('verify_'.$mobile);        if(isset($verify_info) && time()<$verify_info['verify_send_time']+120){            $data['status'] = 0;            $data['msg'] = '验证码发送过于频繁，请稍后发送';        }else{            $verify = rand(100000,999999);            $data = \app\common\service\Msg :: send_sms(1,$mobile,array('code'=>$verify,'content'=>''));            $data['status'] = $data['code'];            //$data['status'] = 1;//测试使用            if($data['status'] == 1){                $verify_info = [                    'verify'  => $verify,                    'verify_expire'  => time()+300,                    'verify_send_time'  => time()                ];                session('verify_'.$mobile,$verify_info);                $data['verify'] = $verify;            }        }        return json($data);    }    /*********************************************************************************************************/    /***************************************用户中心接口******************************************************/    /*********************************************************************************************************/        //用户基本信息    public function getuserinfo() {		$uid =$this->uid;		$Users=new Users();		$data=$Users->getUserInfo($uid);		return json($data);	}    //提现申请    /*public function cash(){        $data = input('post.');        if(!isset($data['account_type']) || !in_array($data['account_type'],[2,3]))            return json(['status'=>0,'msg'=>'提现账户类型参数错误']);        if($data['account_type'] == 2 && (!isset($data['account']) || empty($data['account'])))            return json(['status'=>0,'msg'=>'支付宝提现账户不能为空']);        if($data['account_type'] == 3){            $openid = Db::name('member')->where('id',$this->uid)->value('openid');            if(!$openid){                return json(['status'=>0,'msg'=>'未绑定微信，不能使用微信提现']);            }        }        if(!isset($data['money']) || $data['money']<config('min_cash_money'))            return json(['status'=>0,'msg'=>'提现金额不能小于'.config('min_cash_money')]);        $user_money = Db::name('member')->where('id',$this->uid)->value('money');        if($data['money'] > $user_money)            return json(['status'=>0,'msg'=>'提现金额不能大于用户余额']);        $data['create_time'] = time();        $data['uid'] = $this->uid;        $normal_cash = Db::name('log_cash')->where(['uid'=>$this->uid,'status'=>0])->find();        if($normal_cash){            $back = ['status'=>0,'msg'=>'有提现申请未操作，不能重复申请'];        }else{            if(Db::name('log_cash')->insert($data)){                $back = ['status'=>1,'msg'=>'提现申请已提交'];            }else{                $back = ['status'=>0,'msg'=>'提现申请提交异常'];            }        }        return json($back);    }*/    //提现申请    public function cash(){        $money = input('post.money',0);        $user = Db::name('member')->where('id',$this->uid)->find();        if($user['dl_time']<1 && $user['is_center']!= 1 && config('allow_general_cash')==0){            return json(['status'=>0,'msg'=>'普通用户不允许提现']);        }        if(config('cash_real_info')==1 && $user['real_info_ok']==0){            return json(['status'=>0,'msg'=>'未实名用户不能体现']);        }        if($money <= 0)  return json(['status'=>0,'msg'=>'提现金额不能小于0']);        /*if(Db::name('log_cash')->where(['uid'=>$this->uid,'status'=>0])->find()){            return json(['status'=>0,'msg'=>'有提现申请未操作，不能重复申请']);        }*/        if($money%config('cash_unit') > 0) return json(['status'=>0,'msg'=>'提现金额最小单位为'.config('cash_unit').'元']);        //判断是否在可提现日期内        $now_week = date('w');        $now_week = $now_week==0?7:$now_week;        //echo(date('H'));exit;        if(($now_week < config('cash_start_date') || $now_week > config('cash_end_date')) || (date('H')<config('cash_start_time') || date('H')+1>config('cash_end_time'))){            return json(['status'=>0,'msg'=>'请在每周'.config('cash_start_date').'到'.config('cash_end_date').'日，'.config('cash_start_time').'到'.config('cash_end_time').'时之间进行提现操作']);        }        //判断是否达到每日提现次数        $today_time = strtotime(date('Y-m-d'));        $log_cash_num = Db::name('log_cash')->where(['uid'=>$this->uid,'create_time'=>['>',$today_time]])->count();        if($log_cash_num >= config('cash_num')) return json(['status'=>0,'msg'=>'每日最多可提现'.config('cash_num').'次']);        $user_money = $user['money'];        if($money > $user_money)    return json(['status'=>0,'msg'=>'提现金额不能大于用户余额']);                if($user['cash_account_ok'] == 0)    return json(['status'=>0,'msg'=>'请先完善银行卡信息']);                $data = Db::name('member_bank')->where('uid',$this->uid)->find();        $data['account'] = $data['card_number'];        unset($data['card_number'],$data['id']);        $data['create_time'] = time();        $data['uid'] = $this->uid;        $data['account_type'] = 1;        $data['money'] = $money;        $data['shouxu_cost'] = $money*config('cash_shouxu_cost')/100;        $data['fuwu_cost'] = config('cash_fuwu_cost');        $data['get_money'] = $money-$data['shouxu_cost']-$data['fuwu_cost'];        //插入提现记录，同时扣除相应的余额        $data['balance'] = $user_money-$money;        Db::startTrans();        try {            $res1 = Db::name('log_cash')->insert($data);            $res2 = Db::name('member')->where('id',$this->uid)->setDec('money',$money);            $res3 = Db::name('log_income')->insert(['uid'=>$this->uid,'money'=>-$money,'type'=>10,'create_time'=>time()]);            if($res1 && $res2 && $res3){                Db::commit();                $back = ['status'=>1,'msg'=>'提现申请已提交'];            }else{                Db::rollback();                $back = ['status'=>0,'msg'=>'提现申请提交异常1'];            }        } catch (\Exception $e) {            Db::rollback();            $back = ['status'=>0,'msg'=>'提现申请提交异常2'];        }        return json($back);    }    public function cancel_cash($id){        if(Db::name('log_cash')->where(['id'=>$id,'status'=>0,'uid'=>$this->uid])->update(['status'=>4])){            $cash_money = Db::name('log_cash')->where('id',$id)->value('money');            Db::name('member')->where('id',$this->uid)->setInc('money',$cash_money);            //向收益表中插入记录            Db::name('log_income')->insert(['uid'=>$this->uid,'money'=>$cash_money,'type'=>14,'create_time'=>time()]);            $back = ['status'=>1,'msg'=>'提现申请提已取消'];        }else{            $back = ['status'=>0,'msg'=>'取消提现申请失败'];        }        return json($back);    }    //提现记录    //$type 记录状态：0未操作，1已同意，打款中，2已打款，3已拒绝，4已取消    public function cash_log($type='all',$page=1,$count=10){        $map = ['uid'=>$this->uid];        if($type != 'all'){            $map['type'] = $type;        }        $list = Db::name('log_cash')->where($map)->order('create_time desc')->page($page,$count)->select();        foreach($list as $k=>$v){            if($v['shouxu_cost']==0 && $v['fuwu_cost']==0 && $v['money']>$v['get_money']){                $list[$k]['shouxu_cost'] = round($v['money']-$v['get_money'],2);            }        }        $cash_money = Db::name('log_cash')->where(['uid'=>$this->uid,'status'=>2])->sum('money');                return json(['status'=>1,'list'=>$list,'cash_money'=>$cash_money]);    }    //用户收支记录    public function income_log($type='all',$page=1,$count=10){        $where = ['uid'=>$this->uid];        switch($type){            case 'dl':                $where['type'] = ['in',[1,5,6]];                break;            case 'dy':                $where['type'] = ['in',[2,3,4,7]];                break;            case 'cz':                $where['type'] = 9;                break;        }        $where2 = ['money'=>['<>',0]];        if(config('admin_act_money')==0){            $where2['type'] = ['not in',[8,12]];        }        $list = Db::name('log_income')->where($where)->where($where2)->order('id desc')->page($page,$count)->select();        if($list){            $type_name = config('income_type');            foreach($list as $k=>$v){                $list[$k]['type_name'] = $type_name[$v['type']];            }        }        /*//总收益        $total_income = Db::name('log_income')->where('uid',$this->uid)->where('money','>',0)->sum('money');        //总收益中本金        $principal = Db::name('log_income')->where('uid',$this->uid)->sum('principal');        //总提现金额        $cash_money = Db::name('log_cash')->where(['uid'=>$this->uid,'status'=>2])->sum('money');                //return json(['status'=>1,'list'=>$list,'total_income'=>$total_income,'principal'=>$principal,'cash_money'=>$cash_money]);*/        return json(['status'=>1,'list'=>$list]);    }    //用户绑定微信    public function bind_wechat($openid){        $user = Db::name('member')->where('id',$this->uid)->find();        if(empty($user['openid'])){            Db::name('member')->where('id',$this->uid)->update(['openid'=>$openid]);            $back = ['status'=>1,'msg'=>'绑定成功'];        }else{            $back = ['status'=>0,'msg'=>'已绑定微信，不能重复绑定'];        }        return json($back);    }    //用户签到送积分    public function sign_in(){        $user = Db::name('member')->where('id',$this->uid)->find();        if($user['sign_time'] > strtotime(date('Y-m-d',time()))){            $back = ['status'=>0,'msg'=>'今日已签到'];        }else{            $data = [                'uid'   => $this->uid,                'num'   => 5,                'create_time' => time(),                'act'   => 41,                'remark'=> '签到送积分'            ];            Db::name('integral_log')->insert($data);            Db::name('member')->where('id',$this->uid)->update(['sign_time'=>time(),'integral'=>$user['integral']+5]);            $back = ['status'=>1,'msg'=>'签到成功'];        }        return json($back);    }    /*//用户分享送积分    public function share(){        $user = Db::name('member')->where('id',$this->uid)->find();        if($user['share_time'] > strtotime(date('Y-m-d',time()))){            $back = ['status'=>0,'msg'=>'今日已获取分享积分'];        }else{            $data = [                'uid'   => $this->uid,                'num'   => 1,                'create_time' => time(),                'act'   => 42,                'remark'=> '分享送积分'            ];            Db::name('integral_log')->insert($data);            Db::name('member')->where('id',$this->uid)->update(['share_time'=>time(),'integral'=>$user['integral']+1]);            $back = ['status'=>1,'msg'=>'分享成功'];        }        return json($back);    }*/    //获取用户积分列表    public function integral($page=1,$count=10){        $list = Db::name('integral_log')->where('uid',$this->uid)->order('create_time desc')->page($page,$count)->select();        /*if($list){            $type_name = [                41 => '签到送积分',                42 => '分享送积分',                43 => '管理员调整',            ];            foreach($list as $k=>$v){                $list[$k]['type_name'] = $type_name[$v['act']];            }        }*/        return json(['status'=>1,'list'=>$list]);    }    //会员信息    public function userinfo(){        $uid = get_uid();        if($uid > 0) {            $Users = new Users();            $memberinfo = $Users->userinfo($uid);            unset($memberinfo['password']);            $data = ['code' => 1, 'data' => $memberinfo, 'msg' => ''];        }else{            $data = ['code' => -1, 'data' => '', 'msg' => '未登录'];        }        return json($data);    }    //获取用户推荐用户列表    public function recommend_list($re_uid=0,$page=1,$count=10){        $ruid = $this->uid;        if($re_uid > 0){            $re_user = Db::name('member')->where(['closed'=>0,'id'=>$re_uid])->find();            if($re_user && $re_user['ruid']==$this->uid){                $ruid = $re_uid;            }        }        $list =  Db::name('member')->where(['ruid'=>$ruid,'closed'=>0])->field('id,account,nickname,mobile,head_img,dl_time,create_time,is_center')->page($page,$count)->select();        if($list){            foreach($list as $k=>$v){                if($v['is_center'] == 1){                    $v['rank_name'] = '体验中心';                }else{                    if($v['dl_time'] > 0){                        $v['rank_name'] = '代理会员';                    }else{                        $v['rank_name'] = '普通会员';                    }                }                //如果是二级用户列表，隐藏账户名                if($re_uid > 0){                    $v['account'] = substr($v['account'],0,3).'***'.substr($v['account'],-3);                    $v['nickname'] = substr($v['nickname'],0,3).'***'.substr($v['nickname'],-3);                }                $list[$k] = $v;            }        }        return json(['status'=>'1','list'=>$list]);    }	/**	 * post: 判断用户账或者昵称是否已存在	 * path: check_user_account	 * param: account  用户账号（邮箱/手机/昵称）	 */	public function check_user_account($account){		$Users=new Users();		$res = $Users->check_account($account);		if($res == false){			$data['code'] = 1;			$data['msg'] = '未被占用';		}else{			$data['code'] = 0;			$data['msg'] = '已被占用';		}		return json($data);	}    //修改绑定手机号    public function update_mobile($mobile,$verify){        return json(['status'=>0,'msg'=>'请联系管理员修改']);        if(!isMobile($mobile)){            return json(['status'=>0,'msg'=>'手机号码不合法']);        }        $Users = new Users();        //判断手机号是否已被占用        if($Users->check_mobile($mobile)){            return json(['status'=>0,'msg'=>'手机号已被占用']);        }        $user_mobile = Db::name('member')->where('id',$this->uid)->value('mobile');        $check_verify = $this->check_verify($user_mobile,$verify);        if($check_verify['status'] == 1){            if($Users->update_info($this->uid,['mobile'=>$mobile])){                $data = ['status'=>1,'msg'=>'修改成功！'];                writelogfront($this->uid,'修改绑定手机号',$user_mobile,$mobile);            }else{                $data = ['status'=>0,'msg'=>'修改失败！'];            }            return json($data);        }else{            return json($check_verify);        }    }    //上传头像    public function upload(){		$up = new Upload();		$back = $up->upload();		$back['info'] = $back['data'];		unset($back['data']);		return json($back);    }	//修改资料	public function update_info(){        $param = input('post.');        if(empty($param)){            return json(['status'=>0,'msg'=>'参数为空']);        }        //只能修改昵称和头像        //print_r($param);exit;        foreach($param as $k=>$v){            if(!in_array($k,['nickname','head_img'])){                return json(['status'=>0,'msg'=>'参数名错误']);            }        }        $nickname_update = Db::name('member')->where('id',$this->uid)->value('nickname_update');        if($nickname_update >= 2){            return json(['status'=>0,'msg'=>'超过修改次数，请联系客服修改']);        }else{            if(isset($param['nickname'])){                $param['nickname_update'] = $nickname_update+1;            }        }        $old_info = Db::name('member')->where('id',$this->uid)->find();        $Users=new Users();        $res = $Users->update_info($this->uid,$param);        if ($res)        {            $data['status'] = 1;            $data['msg'] = '修改成功';            if(isset($param['nickname'])){                writelogfront($this->uid,'修改真实姓名',$old_info['nickname'],$param['nickname']);            }elseif((isset($param['head_img']))){                writelogfront($this->uid,'修改头像');            }        } else {            $data['status'] = 0;            $data['msg'] = '修改失败';        }		return json($data);	}    //上传身份证    public function upload_card(){        $up = new Upload();        $back = $up->upload('cards');        $back['info'] = $back['data'];        unset($back['data']);        return json($back);    }    public function real_info(){	    $info = Db::name('member_info')->where('uid',$this->uid)->find();        return json($info);    }	//修改用户实名资料    public function update_real_info(){        $param = input('post.');        $must_column =  ['province','city','district','name','id','age','front_img','back_img'];        foreach($must_column as $v){            if(!isset($param[$v]) || empty($param[$v])){                return json(['status'=>0,'msg'=>'参数未填写完整']);            }        }        if($param['age']<22 || $param['age']>60){            return json(['status'=>0,'msg'=>'年龄大于60 小于22岁，不符合要求无法保存资料']);        }        //判断真实姓名与银行卡姓名是否一致        $user_bank = Db::name('member_bank')->where('uid',$this->uid)->find();        if($user_bank && $user_bank['name']!=$param['name']){            return json(['status'=>0,'msg'=>'真实姓名与银行卡预留姓名不一致']);        }                        $param['uid'] = $this->uid;        $old_info = Db::name('member_info')->where('uid',$this->uid)->find();        if($old_info){            if($old_info['status'] == 1){                return json(['status'=>0,'msg'=>'已认证，需修改请联系管理员']);            }            $param['status'] = 0;            $act = Db::name('member_info')->where('uid',$this->uid)->update($param);            $new_info = Db::name('member_info')->where('uid',$this->uid)->find();            $before=$after='';            $address = new \app\common\model\Address;            $region = $address->addrList();            foreach($new_info as $k=>$v){                if($v != $old_info[$k]){                    switch($k){                        case 'province':                            $before .= '省份：'.$region[$old_info[$k]].'，';                            $after .= '省份：'.$region[$v].'，';                            break;                        case 'city':                            $before .= '城市：'.$region[$old_info[$k]].'，';                            $after .= '城市：'.$region[$v].'，';                            break;                        case 'district':                            $before .= '区/县：'.$region[$old_info[$k]].'，';                            $after .= '区/县：'.$region[$v].'，';                            break;                        case 'name':                            $before .= '姓名：'.$old_info[$k].'，';                            $after .= '姓名：'.$v.'，';                            break;                        case 'id':                            $before .= '身份证：'.$old_info[$k].'，';                            $after .= '身份证：'.$v.'，';                            break;                        case 'age':                            $before .= '年龄：'.$old_info[$k].'，';                            $after .= '年龄：'.$v.'，';                            break;                    }                }            }            writelogfront($this->uid,'修改实名信息',$before,$after);        }else{            $check_info = Db::name('member_info')->where(['id'=>$param['id'],'status'=>1])->find();            if($check_info){                return json(['status'=>0,'msg'=>'该身份证已被占用']);            }            $param['create_time'] = time();            $act = Db::name('member_info')->insert($param);        }        if($act === false){            return json(['status'=>0,'msg'=>'操作异常']);        }        if ($act)        {            $data['status'] = 1;            $data['msg'] = '修改成功';        } else {            $data['status'] = 0;            $data['msg'] = '修改失败';        }        return json($data);    }	//修改提现账户资料    public function update_cash_account(){                $param = input('post.');        $bank_info = Db::name('member_bank')->where('uid',$this->uid)->find();        $must_column =  ['mobile','card_number','bank','bank_local','bank_son','bank_number','verify'];        if(!$bank_info){            array_push($must_column,'name');        }else{            return json(['status'=>0,'msg'=>'请联系管理员修改']);        }        foreach($must_column as $v){            if(!isset($param[$v]) || empty($param[$v])){                return json(['status'=>0,'msg'=>'参数未填写完整']);            }        }        $user_mobile = Db::name('member')->where('id',$this->uid)->value('mobile');        $check = $this->check_verify($user_mobile,$param['verify']);        //$check = ['status'=>1];        if($check['status'] == 0){            return $check;        }        unset($param['verify']);        $param['uid'] = $this->uid;        if($bank_info){            if(isset($param['name']))   unset($param['name']);            $act = Db::name('member_bank')->where('uid',$this->uid)->update($param);            $old_info = $bank_info;            $new_info = Db::name('member_bank')->where('uid',$this->uid)->find();            $before=$after='';            foreach($new_info as $k=>$v){                if($v != $old_info[$k]){                    switch($k){                        case 'name':                            $before .= '姓名：'.$old_info[$k].'，';                            $after .= '姓名：'.$v.'，';                            break;                        case 'mobile':                            $before .= '预留手机号：'.$old_info[$k].'，';                            $after .= '预留手机号：'.$v.'，';                            break;                        case 'card_number':                            $before .= '银行卡号：'.$old_info[$k].'，';                            $after .= '银行卡号：'.$v.'，';                            break;                        case 'bank':                            $before .= '开户银行：'.$old_info[$k].'，';                            $after .= '开户银行：'.$v.'，';                            break;                        case 'bank_local':                            $before .= '银行归属地：'.$old_info[$k].'，';                            $after .= '银行归属地：'.$v.'，';                            break;                        case 'bank_son':                            $before .= '开户行支行：'.$old_info[$k].'，';                            $after .= '开户行支行：'.$v.'，';                            break;                        case 'bank_number':                            $before .= '银行联行号：'.$old_info[$k].'，';                            $after .= '银行联行号：'.$v.'，';                            break;                    }                }            }            writelogfront($this->uid,'修改银行卡信息',$before,$after);        }else{            $real_info = Db::name('member_info')->where(['uid'=>$this->uid,'status'=>1])->find();            if($real_info && $real_info['name']!=$param['name']){                return json(['status'=>0,'msg'=>'银行卡预留姓名与真实信息姓名不一致']);            }            $act = Db::name('member_bank')->insert($param);        }        if($act === false){            return json(['status'=>0,'msg'=>'操作异常']);        }        $Users=new Users();        $res = $Users->update_info($this->uid,['cash_account_ok'=>1]);        if ($res)        {            $data['status'] = 1;            $data['msg'] = '修改成功';        } else {            $data['status'] = 0;            $data['msg'] = '修改失败';        }        return json($data);    }	//修改密码	public function update_password($old_pwd,$new_pwd){        $Users=new Users();        $res = $Users->update_pwd($this->uid,$old_pwd,$new_pwd);        if ($res)        {            $data['status'] = 1;            $data['msg'] = '密码修改成功';            writelogfront($this->uid,'修改密码');        } else {            $data['status'] = 0;            $data['msg'] = '密码修改失败';        }		return json($data);	}    //发送码验证码    //$id		消息标识id    //$param	发送地址    //$type		发送方式：sms/email   短信或邮件    public function send_verify($id,$param,$type='',$content=''){        if(!isMobile($param)){            return json(['status'=>0,'msg'=>'手机号码不合法']);        }        $verify_send_time = session('verify_send_time');        if(isset($verify_send_time) && time()<$verify_send_time+60){            $data['status'] = 0;            $data['msg'] = '验证码发送过于频繁，请稍后发送';        }else{            $verify = rand(100000,999999);            if($type == 'sms'){                $data = \app\common\service\Msg :: send_sms($id,$param,array('name'=>$param,'code'=>$verify,'content'=>$content));            }            //if($data['code'] == 1){                session('verify_'.$param,$verify);                session('verify_expire',time()+300);                session('verify_send_time',time());            //}            $data = ['status'=>1,'verify'=>$verify];        }        return json($data);    }		//找回密码--设置新密码	public function getback_password($account,$password,$verify){        $user = Db::name('member')->where(['account|mobile'=>$account])->find();        if($user){            $check = $this->check_verify($user['mobile'],$verify);            if($check['status']==1){                $Users=new Users();				$res = $Users->edit_pwd($account,$password);				if ($res)				{					$data['status'] = 1;					$data['msg'] = '密码修改成功';				} else {					$data['status'] = 0;					$data['msg'] = '密码修改失败';				}            }else{                $data['status'] = 0;                $data['msg'] = $check['msg'];            }        }else{            $data['status'] = 0;            $data['msg'] = '用户不存在';        }        return json($data);	}	//用户站内信列表	public function msg_list($page,$pagesize=10){		$uid = get_uid();		if($uid > 0){			$User = new Users();			$data['code'] = 1;			$data['info'] = $User->get_msg($uid,$page,$pagesize);		}else{			$data['code'] = 0;			$data['msg'] = '未登录';		}		return json($data);	}	//查看消息	public function read_msg($id){		$uid = get_uid();		if($uid > 0){			$User = new Users();			$data['code'] = 1;			$data['info'] = $User->read_msg($uid,$id);		}else{			$data['code'] = 0;			$data['msg'] = '未登录';		}		return json($data);	}	//删除消息	public function del_msg($id){		$uid = get_uid();		if($uid > 0){			$User = new Users();			$res = $User->del_msg($uid,$id);			if($res == false){				$data['code'] = 0;				$data['msg'] = '删除成功';			}else{				$data['code'] = 1;				$data['msg'] = '删除失败';			}		}else{			$data['code'] = 0;			$data['msg'] = '未登录';		}		return json($data);	}	/*//充值记录	public function paylog(){		$uid =get_uid();		$Users=new Users();		return json($Users->userMoneyLog($uid,['status'=>1,'act'=>1]));	}*/	//消费记录	public function moneylog(){		$uid =get_uid();		$Users=new Users();		return json($Users->userMoneyLog($uid));	}	//羊币记录	public function integrallog(){		$uid =get_uid();		$Users=new Users();		return json($Users->userIntegralLog($uid));	}	//充值 $type1 微信	/*public function wap_recharge($money,$pay_type = 'alipay'){		$uid =$this->uid;		$Users=new Users();		$redata=$Users->recharge($uid,$money);		if($redata['code'] != 1){			return json($redata);		}		$data=$redata['data'];		$Payment=new Payment();		if ($pay_type == 'alipay') {		    //	$res =$Payment->ali_wap($data['uid'],'用户充值',$data['out_trade_no'],$data['money'],['method'=>'chongzhi','param'=>[]],url('wap/usercenter/usercenter','','',true));              $res =  $Payment->ali_app($data['uid'],'用户充值',$data['out_trade_no'], $data['money'],['method'=>'chongzhi','param'=>[]]);		} else {		    if(is_weixin()){                $openid = Db::name('oauth_user')->where(['from' => 'weixin', 'uid' => $uid])->value('openid');                $res = $Payment->wx_pub($openid, $uid, '用户充值', $data['out_trade_no'],$data['money'], ['method'=>'chongzhi','param'=>[]],'用户充值');            }else{                $res =  $Payment->wx_app($uid,'用户充值', $data['out_trade_no'], $data['money'],['method'=>'chongzhi','param'=>[]],'用户充值');            }		}		return json($res);	}*/    /**     * 游戏会员分享二维码调取     *@param	$uid	    会员id     */    public function shaer_url(){        $uid = get_uid();        if($uid > 0) {            //加密uid            $tma=  Db::name('member')->where(['id'=>$uid])->value('account');            $url= 'http://'.$_SERVER['HTTP_HOST'].'/wap/index/register.html?track_id='.$tma;            $ewm = 'https://api.qrserver.com/v1/create-qr-code/?size=150x150&data='.$url;            $data = ['code' => 1, 'data' =>['qrcode'=>$ewm] , 'msg' => ''];        }else{            $data = ['code' => 0, 'data' => '', 'msg' => '未登录'];        }        return json($data);    }    //一级推荐人列表    //@param	$uid	会员id    public function refer_user1($page=1){        $uid = get_uid();        if($uid > 0) {            $map['tuid'] = $uid;            $map['closed'] = 0;            $map['id'] = array('gt',1);            $Nowpage = $page;            $limits = config('list_rows');// 获取总条数            $res = Db::name('member')->order('id desc')->field('id,account,nickname,head_img,yang_count,yang_ing,create_time')->where($map)->page($Nowpage, $limits)->select();            if ($res) {                return json(['status' => 1, 'data' => $res, 'msg' => '']);            } else {                return json(['status' => 0, 'data' => '', 'msg' => '没有记录']);            }        }else{            return json(['code' => -1, 'data' => '', 'msg' => '未登录']);        }    }    //二级推荐人列表    //@param	$uid	会员id    public function refer_user2($page=1){        $uid = get_uid();        if($uid > 0) {            //一级会员id            $map['tuid']=$uid;            $map['closed'] = 0;            $map['id'] = array('gt',1);            $userall =Db::name('member')->field('id')->where($map)->select();            $userid = "";            foreach($userall as $value){                if($userid){                    $userid =$userid. ",".$value['id'];                }else{                    $userid = $value['id'];                }            }            $map['tuid'] = array('in',$userid);            $map['closed'] = 0;            //$map['id'] = array('gt',12000);            $Nowpage = $page;            $limits = config('list_rows');// 获取总条数            $res =Db::name('member')->order('id desc')->field('id,account,nickname,head_img,yang_count,yang_ing,create_time')->where($map)->where(['tuid'=>['>',1]])->page($Nowpage, $limits)->select();            if($res){                return json(['status'=>1,'data'=>$res,'msg'=>'']);            }else{                return json(['status'=>0,'data'=>'','msg'=>'没有记录']);            }        }else{            return json(['code' => -1, 'data' => '', 'msg' => '未登录']);        }    }    //绑定支付    public function zfb($zfb_name,$zfb_hao,$verify){        $uid = get_uid();        if($uid > 0) {            if(!$zfb_name || !$zfb_hao || !$verify){ return json(['code' => 0, 'data' => '', 'msg' => '参数错误']); }            $verify_expire = session('verify_expire');            if(!isset($verify_expire) || time()>$verify_expire){                $data['code'] = 0;                $data['msg'] = '验证码过期';                return json($data);            }            $param['zfb_name'] = $zfb_name;            $param['zfb_hao'] = $zfb_hao;            $Users=new Users();            $userinfo = $Users->userinfo($uid);            $s_verify= session('verify_'.$userinfo['mobile']);            if($s_verify != $verify){                $data['code'] = 0;                $data['msg'] = '验证码错误';                return json($data);            }            $res = $Users->update_info($uid,$param);            if ($res) {                $data['code'] = 1;                $data['msg'] = '支付绑定成功';            }else{                $data['code'] = 0;                $data['msg'] = '支付绑定失败';            }            return json($data);        }else{            return json(['code' => -1, 'data' => '', 'msg' => '未登录']);        }    }    //绑定银行卡支付    public function yhk($yinhang,$huming,$kahao,$verify){        $uid = get_uid();        if($uid > 0) {            if(!$yinhang || !$huming || !$kahao || !$verify){ return json(['code' => 0, 'data' => '', 'msg' => '参数错误']); }            $verify_expire = session('verify_expire');            if(!isset($verify_expire) || time()>$verify_expire){                $data['code'] = 0;                $data['msg'] = '验证码过期';                return json($data);            }            $param['yinhang'] = $yinhang;            $param['huming'] = $huming;            $param['kahao'] = $kahao;            $Users=new Users();            $userinfo = $Users->userinfo($uid);            $s_verify= session('verify_'.$userinfo['mobile']);            if($s_verify != $verify){                $data['code'] = 0;                $data['msg'] = '验证码错误';                return json($data);            }            $res = $Users->update_info($uid,$param);            if ($res) {                $data['code'] = 1;                $data['msg'] = '银行卡绑定成功';            }else{                $data['code'] = 0;                $data['msg'] = '银行卡绑定失败';            }            return json($data);        }else{            return json(['code' => -1, 'data' => '', 'msg' => '未登录']);        }    }    //提现    public function withdrawal($money,$type){        $uid = get_uid();        if($uid > 0) {            //添加记录            $Withdraw=new Withdraw();            return json($Withdraw->tixian($uid,$money,$type));        }else{            return json(['code' => -1, 'data' => '', 'msg' => '未登录']);        }    }    //提现记录    public function withdraw(){        $uid =get_uid();        $map['uid']=$uid;        $Withdraw=new Withdraw();        $res =$Withdraw->order('create_time desc')->where($map)->select();        if($res){            return ['code'=>1,'data'=>$res,'msg'=>''];        }else{            return ['code'=>0,'data'=>'','msg'=>'没有记录'];        }        return json($Users->withdrawLog($uid));    }    /**     * 好友基本信息     * yuid  好友id     */    public function hymember_yang($yuid){        $uid = get_uid();        if(!$uid) {            return json(['code' => -1, 'data' => '', 'msg' => '未登录']);        }        if(!$yuid){            return json(['code' =>0, 'data' => '', 'msg' => '参数错误']);        }        $reyang = Db::name('member')->field('id,account,mobile,head_img,integral,yang_ing,tuid')->where(['id'=>$yuid])->find();        if(!$reyang || $reyang['tuid']<=0){            return json(['code' =>0, 'data' => '', 'msg' => '非好友牧场']);        }        $treyang = Db::name('member')->field('tuid')->where(['id'=>$reyang['tuid']])->find();        if($reyang['tuid']!=$uid && $treyang['tuid']!=$uid){            return json(['code' =>0, 'data' => '', 'msg' => '非好友信息']);        }else{            return json(['code' =>1, 'data' => $reyang, 'msg' => '']);        }    }    /**     * 判断是否是好友牧场     * yuid  好友id     */    public function refer_yang($yuid){        $uid = get_uid();        if(!$uid) {            return json(['code' => -1, 'data' => '', 'msg' => '未登录']);        }        if(!$yuid){            return json(['code' =>0, 'data' => '', 'msg' => '参数错误']);        }        $reyang = Db::name('member')->field('tuid')->where(['id'=>$yuid])->find();        if(!$reyang || $reyang['tuid']<=0){            return json(['code' =>0, 'data' => '', 'msg' => '非好友牧场']);        }        $treyang = Db::name('member')->field('tuid')->where(['id'=>$reyang['tuid']])->find();        if($reyang['tuid']!=$uid && $treyang['tuid']!=$uid){            return json(['code' =>0, 'data' => '', 'msg' => '非好友牧场']);        }else{            return json(['code' =>1, 'data' => '', 'msg' => '好友牧场']);        }    }    /*完善用户信息*/    public function perfect_info(){        $perfect_info =session('perfect_info');        if(!$perfect_info){            return json(['code'=>0,'msg'=>'微信用户信息不存在']);        }        $phone = input('phone','');        $verify = input('verify','');        $password = input('password',0);        if(!$phone || !$verify || !$password){            return json(['code'=>0,'msg'=>'参数未填写完整~']);        }        $check_verify = $this->check_verify($phone,$verify);        if($check_verify['code'] != 1){            return json($check_verify);        }        //这个地方占用也无所谓        $Users=new Users();        $user = Db::name('member')->where(['account'=>$phone])->find();        if($user){            //已经存在了 就直接做关联            $uid =$user['id'];            Db::name('oauth_user')->where(['id'=>$perfect_info['id']])->update(['uid'=>$uid]);            $Users->autoLogin($user);            return json(['code'=>1,'msg'=>'创建成功']);            $this->redirect(_get_login_redirect());        }else{            $ip=request()->ip();            $referid=0;            $reusername='';            $nember= array(                'nickname' => $perfect_info['nick'],                'head_img' => $perfect_info['avatar'],                'update_time' =>time(),                'last_login_ip' => $ip,                'group_id'=>config('default_user_group'),                'login_num' =>'1',                'status'=>'1',                'closed'=>'0',                'account'=>$phone,                'mobile'=>$phone,                'password'=>md5(md5($password) . config('auth_key')),                'tuid'=>$referid,                'tusername'=>$reusername,            );            $uid =  Db::name('member')->insert($nember,false,true);            $nember['id']=$uid;            //更新$reusername            Db::name('oauth_user')->where(['id'=>$perfect_info['id']])->update(['uid'=>$uid]);            $Users->autoLogin($nember);            return json(['code'=>1,'msg'=>'创建成功']);        }    }    //校验验证码    private function check_verify($phone,$verify){        $verify_info = session('verify_'.$phone);        if(!isset($verify_info)){            return ['status'=>0,'msg'=>'验证码无效~'];        }        if(time()>$verify_info['verify_expire']){            return ['status'=>0,'msg'=>'验证码过期~'];        }        $s_verify = $verify_info['verify'];        if($s_verify != $verify){            return ['status'=>0,'msg'=>'验证码错误~'];        }else{            session('verify_'.$phone,null);            return ['status'=>1,'msg'=>'验证码通过~'];        }    }}